---
  - hosts: master[0]
    any_errors_fatal: true
    name: "{{ play_name | default('Initialize Helm and Start Tiller') }}"
    become: yes
    run_once: true
    vars_files:
      - group_vars/all.yaml
      - group_vars/container_images.yaml

    tasks:
      - name: "create new serviceaccount for tiller"
        command: "kubectl -n kube-system create sa tiller"
        register: out
        failed_when: 'out.rc != 0 and out.stderr is defined and "Error from server (AlreadyExists)" not in out.stderr'
      - name: "attach cluster-admin role to the service account tiller"
        command: "kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller"
        register: out
        failed_when: 'out.rc != 0 and out.stderr is defined and "Error from server (AlreadyExists)" not in out.stderr'
        
      - name: "run helm init"
        local_action: command ../../helm init --service-account=tiller -i="{{ images.helm }}" --upgrade {% if disconnected_installation|bool == true %}--skip-refresh{% endif %}
        become: no
        environment: "{{ proxy_env|combine({'KUBECONFIG': local_kubeconfig_directory}) }}"
          
      - name: "add kismatic helm repo"
        local_action: command ../../helm repo add kismatic https://apprenda.github.io/kismatic-charts/
        become: no
        environment: "{{ proxy_env|combine({'KUBECONFIG': local_kubeconfig_directory}) }}"
        when: disconnected_installation|bool != true

      - block:
        - name: wait until the tiller pod is ready
          command: kubectl get deployment tiller-deploy -n kube-system -o jsonpath='{.status.availableReplicas}'
          register: readyReplicas
          until: readyReplicas.stdout|int == 1
          retries: 24
          delay: 10
          failed_when: false # We don't want this task to actually fail (We catch the failure with a custom msg in the next task)
        - name: fail if the tiller pod is not ready
          fail:
            msg: "Timed out waiting for the tiller pod to be in the ready state."
          when: readyReplicas.stdout|int != 1
        when: run_pod_validation|bool == true 

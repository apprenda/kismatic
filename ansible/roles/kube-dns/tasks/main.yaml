---
  - name: create /etc/kubernetes/specs directory
    file:
      path: "{{ kubernetes_spec_dir }}"
      state: directory
  - name: copy kubernetes-dns.yaml to remote
    template:
      src: kubernetes-dns.yaml
      dest: "{{ kubernetes_spec_dir }}/kubernetes-dns.yaml"
  - name: start kubernetes-dns service
    command: kubectl apply -f {{ kubernetes_spec_dir }}/kubernetes-dns.yaml
    register: out
  - name: wait until DNS pods are ready
    command: kubectl get deployment kube-dns -n kube-system -o jsonpath='{.status.availableReplicas}'
    register: readyReplicas
    until: readyReplicas.stdout|int == kube_dns_replicas|int
    retries: 24
    delay: 10
    failed_when: false # We don't want this task to actually fail (We catch the failure with a custom msg in the next task)
  - name: get DNS deployment if DNS pods are not ready
    command: kubectl get deployment kube-dns -n kube-system
    register: get_dns_deployment
    when: readyReplicas.stdout|int != kube_dns_replicas|int
  - name: get DNS pods if DNS pods are not ready
    command: kubectl get pods -l k8s-app=kube-dns -n kube-system
    register: get_dns_pods
    when: readyReplicas.stdout|int != kube_dns_replicas|int
  - name: fail if DNS pods are not ready
    fail:
      msg: |
          Timed out waiting for DNS pods to be in the ready state.

          ---- kube-dns deployment ----
          {{ get_dns_deployment.stdout }}

          ------- kube-dns pods -------
          {{ get_dns_pods.stdout }}
          
          See https://github.com/apprenda/kismatic/blob/master/docs/TROUBLESHOOTING.md
          for troubleshooting documentation.
    when: readyReplicas.stdout|int != kube_dns_replicas|int

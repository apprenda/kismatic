---
  # YUM
  - name: add Kubernetes yum repository
    yum_repository:
      name: Kubernetes
      description: Kubernetes Packages
      baseurl: "http://yum.kubernetes.io/repos/kubernetes-el7-x86_64"
      gpgkey: "https://packages.cloud.google.com/yum/doc/yum-key.gpg,https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg"
      gpgcheck: yes
    when: ansible_os_family == 'RedHat' and ('worker' in group_names or 'ingress' in group_names or 'storage' in group_names or 'master' in group_names)
  - name: add Kismatic yum repository
    yum_repository:
      name: kismatic
      description: Kismatic Packages
      baseurl: "{{ yum_repository_url }}"
      gpgkey: "{{ yum_gpg_key_url }}"
      gpgcheck: yes
    when: ansible_os_family == 'RedHat' and 'etcd' in group_names

  # install YUM packages
  - name: install etcd yum package
    command: 'yum install -y kismatic-etcd-{{ kismatic_yum_version }}'
    when: ansible_os_family == 'RedHat' and 'etcd' in group_names
  - name: install Kubernetes packages
    command: 'yum install -y docker kubelet kubectl kubernetes-cni'
    when: ansible_os_family == 'RedHat' and ('worker' in group_names or 'ingress' in group_names or 'storage' in group_names or 'master' in group_names)
  - name: enable docker
    command: 'systemctl enable docker'
    when: ansible_os_family == 'RedHat' and ('worker' in group_names or 'ingress' in group_names or 'storage' in group_names or 'master' in group_names)
  - name: start docker
    command: 'systemctl start docker'
    when: ansible_os_family == 'RedHat' and ('worker' in group_names or 'ingress' in group_names or 'storage' in group_names or 'master' in group_names)
  - name: install Kismatic offline yum package
    command: 'yum install -y kismatic-offline-{{ kismatic_yum_version }}'
    when: "ansible_os_family == 'RedHat' and disconnected_installation|bool == true and inventory_hostname == groups['master'][0]"
    register: result
    until: result|success
    retries: 3
    delay: 3

  # DEB
  - name: install apt-transport-https package
    apt:
      name: apt-transport-https
      state: latest
      update_cache: yes
    when: ansible_os_family == 'Debian'
  - name: add Kubernetes deb key
    apt_key:
      url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
      validate_certs: no
    when: ansible_os_family == 'Debian' and ('worker' in group_names or 'ingress' in group_names or 'storage' in group_names or 'master' in group_names)
  - name: add Kubernetes deb repository
    apt_repository:
      repo: 'deb http://apt.kubernetes.io/ kubernetes-xenial main'
      validate_certs: no
    when: ansible_os_family == 'Debian' and ('worker' in group_names or 'ingress' in group_names or 'storage' in group_names or 'master' in group_names)
  - name: add Kismatic deb key
    apt_key:
      url: "{{ deb_gpg_key_url }}"
      validate_certs: no
    when: ansible_os_family == 'Debian' and 'etcd' in group_names
  - name: add Kismatic deb repository
    apt_repository:
      repo: 'deb {{ deb_repository_url }} xenial main'
      validate_certs: no
    when: ansible_os_family == 'Debian' and 'etcd' in group_names

  - name: apt-get update
    apt:
      update_cache: yes
    when: ansible_os_family == 'Debian'

    # install DEB packages
  - name: install etcd deb packages
    command: 'apt-get install -y kismatic-etcd={{ kismatic_apt_version }}'
    when: ansible_os_family == 'Debian' and 'etcd' in group_names
    register: result
    until: result|success
    retries: 3
    delay: 1
  - name: install Kubernetes packages
    command: 'apt-get install -y docker.io kubelet kubectl kubernetes-cni'
    when: ansible_os_family == 'Debian' and ('worker' in group_names or 'ingress' in group_names or 'storage' in group_names or 'master' in group_names)
    register: result
    until: result|success
    retries: 3
    delay: 1
  - name: install Kismatic offline deb package
    command: 'apt-get install -y kismatic-offline={{ kismatic_apt_version }}'
    when: "ansible_os_family == 'Debian' and disconnected_installation|bool == true and inventory_hostname == groups['master'][0]"
    register: result
    until: result|success
    retries: 3
    delay: 1

  # verify that Docker installed succesfully and is running
  - name: verify docker is installed
    command: docker ps
    when: "'worker' in group_names or 'ingress' in group_names or 'storage' in group_names or 'master' in group_names"
---
  # add ingress label to nodes
  - name: label ingress nodeSelector
    command: kubectl label nodes {% for host in groups['ingress'] %}{{ host }} {% endfor %} ingress=true --overwrite

  - name: copy default-backend.yaml to remote
    template:
      src: default-backend.yaml
      dest: /tmp/default-backend.yaml
  - name: start default-backend serivce
    command: kubectl apply -f /tmp/default-backend.yaml

  - name: copy nginx-ingress-controller.yaml to remote
    template:
      src: nginx-ingress-controller.yaml
      dest: /tmp/nginx-ingress-controller.yaml
  - name: start nginx-ingress-controller serivce
    command: kubectl apply -f /tmp/nginx-ingress-controller.yaml
    register: out

  - name: wait until all ingress controllers pods are ready
    command: kubectl get ds ingress -o=jsonpath='{.status.numberReady}' --namespace=kube-system
    register: readyReplicas
    until: readyReplicas.stdout|int == groups['ingress']|length
    retries: 15
    delay: 10
    failed_when: false # We don't want this task to actually fail (We catch the failure with a custom msg in the next task)
  - name: verify at least one DNS pod is ready
    fail:
      msg: "Timed out waiting for all ingress controllers pods to be in the ready state."
    when: readyReplicas.stdout|int != groups['ingress']|length
  - debug: var=out.stdout_lines

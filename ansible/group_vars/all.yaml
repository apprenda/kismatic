#===============================================================================
# VERSIONS
kubernetes_version: v1.5.2
kismatic_yum_version: 1.5.2_3-1
kismatic_apt_version: 1.5.2-3
kismatic_docker_engine_yum_version: 1.11.2_1-1
kismatic_docker_engine_apt_version: 1.11.2-0~xenial

calico_docker_version: "v1.0.0"
calico_kube_policy_controller_version: "v0.4.0"
kubedns_version: "1.9"
kubedns_version_id: "v19" # Used for the kube-dns replication controller's name (e.g. kube-dns-v19)
kube_dnsmasq_version: "1.4"
exechealthz_version: "1.2"
kubernetes_dashboard_version: "v1.5.1"
defaultbackend_version: "1.0"
nginx_ingress_controller_version: "0.8.3"
docker_registry_version: "2.5.1"
nginx_version: "stable-alpine"
busybox_version: "latest"
pause_version: "3.0"
apprenda_tcp_healthz_version: "v1.0.0"
glusterfs_server_version_rhel: "3.8.7-1.el7"
glusterfs_server_version_ubuntu: "3.8.7-ubuntu1~xenial1"
# RHEL needs dash between name-version, Ubuntu needs equals sign between name=version
glusterfs_server_version: "{% if ansible_os_family == 'RedHat' %}-{{ glusterfs_server_version_rhel }}{% elif ansible_os_family == 'Ubuntu' %}={{ glusterfs_server_version_ubuntu }}{% endif %}"
#===============================================================================
# common variables for all hosts
temprary_download_dir: /tmp/kismatic
init_system_dir: /etc/systemd/system/
init_system_file_extenstion: service
bin_dir: /usr/bin
#===============================================================================
# service ports
etcd_k8s_client_port: 2379
etcd_networking_client_port: 6666
kubernetes_master_secure_port: 6443
kubernetes_master_insecure_port: 8080
#===============================================================================
# common variables for etcd
# etcd-certificates
etcd_certificates_owner: root
etcd_certificates_group: root
etcd_certificates_mode: 0660
# etcd-install
etcd_install_executable_owner: 1000
etcd_install_executable_group: 1000
etcd_install_executable_mode: 0775
# etcd-install:etcd.service.j2
etcd_service_template_name: etcd.service.j2
etcd_service_file: "{{ etcd_service_name }}.{{ init_system_file_extenstion }}"
etcd_service_path: "{{ init_system_dir }}/{{ etcd_service_file }}"
etcd_service_owner: root
etcd_service_group: root
etcd_service_mode: 0664
# etcd cluster setup
etcd_service_cluster_string: "{% for host in groups['etcd'] %}{{ host }}=https://{{ hostvars[host]['internal_ipv4'] }}:{{ etcd_service_peer_port }}{% if not loop.last %},{% endif %}{% endfor %}"
#===============================================================================
# docker-install
docker_install_dir: /etc/docker
docker_self_signed_cert_dir: "{{ docker_install_dir }}/certs.d/{{ docker_registry_full_url }}"
docker_service_file: "docker.{{ init_system_file_extenstion }}"
docker_service_path: "{{ init_system_dir }}/{{ docker_service_file }}"
docker_certificates_ca_file_name: ca.pem
docker_certificates_cert_file_name: docker.pem
docker_certificates_key_file_name: docker-key.pem
docker_certificates_cert_path: "{{ docker_install_dir }}/{{ docker_certificates_cert_file_name }}"
docker_certificates_key_path: "{{ docker_install_dir }}/{{ docker_certificates_key_file_name }}"
#===============================================================================
# calico
# directories
calico_dir: /etc/calico
# paths
calico_ippool_path: "{{ calico_dir }}/ip-pool.yaml"
calicoctl_conf_path: "{{ calico_dir }}/calicoctl.cfg"
#file modes
calico_executable_mode: 0775
#networking
kubernetes_dns_service_addr: https://{{kubernetes_dns_service_ip}}:{{kubernetes_master_secure_port}}
#===============================================================================
# kubernetes
# directories
kubernetes_install_dir: /etc/kubernetes
kubernetes_service_dir: "{{ init_system_dir }}"
network_plugin_dir: /etc/cni/net.d
kubernetes_auth_dir: /etc/kubernetes/auth
kubelet_lib_dir: /var/lib/kubelet
# paths
kubernetes_basic_auth_path: "{{kubernetes_auth_dir}}/basicauth.csv"
kubernetes_authorization_policy_path: "{{kubernetes_auth_dir}}/authorization-policy.json"
kubernetes_kubeconfig_path: "{{kubelet_lib_dir}}/kubeconfig"
# file modes
kubernetes_executable_mode: 0775
kubernetes_service_mode: 0664
kubernetes_certificates_mode: 0660
docker_certificate_mode: 0660
network_environment_mode: 0660
# owner/group
kubernetes_owner: root
kubernetes_group: root
kubernetes_certificates_owner: root
kubernetes_certificates_group: root
docker_certificates_owner: root
docker_certificates_group: root
# kubernetes cluster config
kubernetes_master_apiserver_count: "{{ groups['master'] | length }}"
kubernetes_master_ip: https://{{ kubernetes_load_balanced_fqdn }}:{{ kubernetes_master_secure_port }}
kubernetes_schedulable: "{% if 'worker' in group_names %}true{% else %}false{% endif %}"
# kubernetes certificate config
kubernetes_certificates_ca_file_name: ca.pem
kubernetes_certificates_cert_file_name: kubenode.pem
kubernetes_certificates_key_file_name: kubenode-key.pem
kubernetes_certificates_service_account_cert_file_name: service-account.pem
kubernetes_certificates_service_account_key_file_name: service-account-key.pem
kubernetes_certificates_ca_path: "{{ kubernetes_install_dir }}/{{ kubernetes_certificates_ca_file_name }}"
kubernetes_certificates_cert_path: "{{ kubernetes_install_dir }}/{{ kubernetes_certificates_cert_file_name }}"
kubernetes_certificates_key_path: "{{ kubernetes_install_dir }}/{{ kubernetes_certificates_key_file_name }}"
kubernetes_certificates_service_account_cert_path: "{{ kubernetes_install_dir }}/{{ kubernetes_certificates_service_account_cert_file_name }}"
kubernetes_certificates_service_account_key_path: "{{ kubernetes_install_dir }}/{{ kubernetes_certificates_service_account_key_file_name }}"
# etcd IPs
#etcd_networking_cluster_ip_list: "{% for host in groups['etcd'] %}{% if hostvars[host]['inventory_hostname'] is defined %}https://{{ host }}:{{ etcd_networking_client_port }}{% if not loop.last %},{% endif %}{% endif %}{% endfor %}"
#etcd_k8s_cluster_ip_list: "{% for host in groups['etcd'] %}{% if hostvars[host]['inventory_hostname'] is defined %}https://{{ host }}:{{ etcd_k8s_client_port }}{% if not loop.last %},{% endif %}{% endif %}{% endfor %}"
etcd_networking_cluster_ip_list: "{% for host in groups['etcd'] %}https://{{ host }}:{{ etcd_networking_client_port }}{% if not loop.last %},{% endif %}{% endfor %}"
etcd_k8s_cluster_ip_list: "{% for host in groups['etcd'] %}https://{{ host }}:{{ etcd_k8s_client_port }}{% if not loop.last %},{% endif %}{% endfor %}"

#===============================================================================
docker_registry_full_url: "{{ docker_registry_address }}:{{ docker_registry_port }}"
load_private_images: "{{ use_private_docker_registry is defined and use_private_docker_registry|bool == true and disconnected_installation is defined and disconnected_installation|bool == true }}"
calico_node_orig_img: calico/node:{{calico_docker_version}}
calico_node_priv_img: "{{ docker_registry_full_url }}/calico/node:{{calico_docker_version}}"
calico_node_img: '{% if load_private_images|bool == true %}{{ calico_node_priv_img }}{% else %}{{ calico_node_orig_img }}{% endif %}'

defaultbackend_orig_img: gcr.io/google_containers/defaultbackend:{{ defaultbackend_version }}
defaultbackend_priv_img: "{{ docker_registry_full_url }}/gcr.io/google_containers/defaultbackend:{{ defaultbackend_version }}"
defaultbackend_img: '{% if load_private_images|bool == true %}{{ defaultbackend_priv_img }}{% else %}{{ defaultbackend_orig_img }}{% endif %}'

nginx_ingress_controller_orig_img: gcr.io/google_containers/nginx-ingress-controller:{{ nginx_ingress_controller_version }}
nginx_ingress_controller_priv_img: "{{ docker_registry_full_url }}/gcr.io/google_containers/nginx-ingress-controller:{{ nginx_ingress_controller_version }}"
nginx_ingress_controller_img: '{% if load_private_images|bool == true %}{{ nginx_ingress_controller_priv_img }}{% else %}{{ nginx_ingress_controller_orig_img }}{% endif %}'

nginx_orig_img: nginx:{{ nginx_version }}
nginx_priv_img: "{{ docker_registry_full_url }}/nginx:{{ nginx_version }}"
nginx_img: '{% if load_private_images|bool == true %}{{ nginx_priv_img }}{% else %}{{ nginx_orig_img }}{% endif %}'

busybox_orig_img: busybox:{{ busybox_version }}
busybox_priv_img: "{{ docker_registry_full_url }}/busybox:{{ busybox_version }}"
busybox_img: '{% if load_private_images|bool == true %}{{ busybox_priv_img }}{% else %}{{ busybox_orig_img }}{% endif %}'

pause_orig_img: gcr.io/google_containers/pause-amd64:{{ pause_version }}
pause_priv_img: "{{ docker_registry_full_url }}/gcr.io/google_containers/pause-amd64:{{ pause_version }}"
pause_img: '{% if load_private_images|bool == true %}{{ pause_priv_img }}{% else %}{{ pause_orig_img }}{% endif %}'

calico_kube_policy_controller_orig_img: calico/kube-policy-controller:{{ calico_kube_policy_controller_version }}
calico_kube_policy_controller_priv_img: "{{ docker_registry_full_url }}/calico/kube-policy-controller:{{ calico_kube_policy_controller_version }}"
calico_kube_policy_controller_img: '{% if load_private_images|bool == true %}{{ calico_kube_policy_controller_priv_img }}{% else %}{{ calico_kube_policy_controller_orig_img }}{% endif %}'

kubedns_orig_img: gcr.io/google_containers/kubedns-amd64:{{ kubedns_version }}
kubedns_priv_img: "{{ docker_registry_full_url }}/kubedns-amd64:{{ kubedns_version }}"
kubedns_img: '{% if load_private_images|bool == true %}{{ kubedns_priv_img }}{% else %}{{ kubedns_orig_img }}{% endif %}'

kube_dnsmasq_orig_img: gcr.io/google_containers/kube-dnsmasq-amd64:{{ kube_dnsmasq_version }}
kube_dnsmasq_priv_img: "{{ docker_registry_full_url }}/kube-dnsmasq-amd64:{{ kube_dnsmasq_version }}"
kube_dnsmasq_img: '{% if load_private_images|bool == true %}{{ kube_dnsmasq_priv_img }}{% else %}{{ kube_dnsmasq_orig_img }}{% endif %}'

exechealthz_orig_img: gcr.io/google_containers/exechealthz-amd64:{{ exechealthz_version }}
exechealthz_priv_img: "{{ docker_registry_full_url }}/exechealthz-amd64:{{ exechealthz_version }}"
exechealthz_img: '{% if load_private_images|bool == true %}{{ exechealthz_priv_img }}{% else %}{{ exechealthz_orig_img }}{% endif %}'

kubernetes_dashboard_orig_img: gcr.io/google_containers/kubernetes-dashboard-amd64:{{ kubernetes_dashboard_version }}
kubernetes_dashboard_priv_img: "{{ docker_registry_full_url }}/kubernetes-dashboard-amd64:{{ kubernetes_dashboard_version }}"
kubernetes_dashboard_img: '{% if load_private_images|bool == true %}{{ kubernetes_dashboard_priv_img }}{% else %}{{ kubernetes_dashboard_orig_img }}{% endif %}'

apprenda_tcp_healthz_orig_img: apprenda/tcp-healthz-amd64:{{ apprenda_tcp_healthz_version }}
apprenda_tcp_healthz_priv_img: "{{ docker_registry_address }}:{{ docker_registry_port }}/tcp-healthz-amd64:{{ apprenda_tcp_healthz_version }}"
apprenda_tcp_healthz_img: "{% if load_private_images|bool == true %}{{ apprenda_tcp_healthz_priv_img }}{% else %}{{ apprenda_tcp_healthz_orig_img }}{% endif %}"

# kismatic packages
yum_repository_url: https://kismatic-packages-rpm.s3-accelerate.amazonaws.com
yum_gpg_key_url: https://kismatic-packages-rpm.s3-accelerate.amazonaws.com/public.key
deb_repository_url: https://kismatic-packages-deb.s3-accelerate.amazonaws.com
deb_gpg_key_url: https://kismatic-packages-deb.s3-accelerate.amazonaws.com/public.key

# Uncomment below to use test repo
# yum_repository_url: https://kismatic-packages-rpm-test.s3-accelerate.amazonaws.com
# yum_gpg_key_url: https://kismatic-packages-rpm-test.s3-accelerate.amazonaws.com/public.key
# deb_repository_url: https://kismatic-packages-deb-test.s3-accelerate.amazonaws.com
# deb_gpg_key_url: https://kismatic-packages-deb-test.s3-accelerate.amazonaws.com/public.key
# Uncomment below to use local repo
# yum_repository_url: http://192.168.200.80/
# yum_gpg_key_url: http://192.168.200.80/public.key
# deb_repository_url: http://192.168.200.80/
# yumdeb_gpg_key_url: http://192.168.200.80/public.key
#===============================================================================
# PV configs for monitoring and logging
#pv_monitoring_nfs_server_ip: "192.168.99.20"
#pv_monitoring_nfs_dir: "/kubernetes/monitoring"
#pv_monitoring_storage_size: "10Gi"
#pv_logging_nfs_server_ip: "192.168.99.20"
#pv_logging_nfs_dir: "/kubernetes/logging"
#pv_logging_storage_size: "10Gi"
#===============================================================================

# Preflight check variables
preflight_check_tcp_ports: "{{etcd_k8s_client_port}},{{etcd_networking_client_port}},{{kubernetes_master_secure_port}},{{kubernetes_master_insecure_port}}"

# Gluster
volume_mount: /
volume_base_dir: data/
volume_mode: 777
volume_replica_count: 2
volume_distribution_count: 1
